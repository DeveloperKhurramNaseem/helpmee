# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Build & ship APK to Firebase App Distribution"
  lane :android_firebase do

    fastlane_dir  = __dir__                              # android/fastlane
    android_dir   = File.expand_path("..", fastlane_dir)  # android/
    root_dir      = File.expand_path("..", android_dir)   

    sh "cd #{root_dir} && flutter pub get"
    sh "cd #{root_dir} && flutter build apk --release"   # add --flavor myFlavor if needed

    # 2) Find a release APK regardless of working dir / flavors / split-per-abi
    apk_candidates = Dir[File.join(root_dir, "build/app/outputs/**/*.apk")]
                     .select { |p| p.include?("release") && !p.end_with?("-unsigned.apk") }

    # Prefer the universal 'app-release.apk' if present
    apk_path = apk_candidates.find { |p| File.basename(p) == "app-release.apk" } ||
               apk_candidates.max_by { |p| File.size(p) rescue 0 }

    UI.user_error!("No release APK found under #{root_dir}/build/app/outputs. Candidates: #{apk_candidates.inspect}") unless apk_path
    UI.message("Using APK: #{apk_path}")

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID_ANDROID"],
      testers: ENV["FIREBASE_TESTERS"],
      release_notes: "CI build #{Time.now.utc}",
      apk_path: apk_path,                                # ðŸ‘ˆ pass explicit absolute path
      firebase_cli_token: ENV["FIREBASE_TOKEN"]
    )

    ###########################################################################
    # sh "flutter pub get"
    # sh "flutter build apk --release"
    # firebase_app_distribution(
    #   app: ENV["FIREBASE_APP_ID_ANDROID"],
    #   testers: ENV["FIREBASE_TESTERS"],
    #   release_notes: "CI build #{Time.now.utc}",
    #   apk_path: "build/app/outputs/flutter-apk/app-release.apk",
    #   firebase_cli_token: ENV["FIREBASE_TOKEN"]
    # )
    ###########################################################################
    # fastlane_dir  = __dir__                                 # android/fastlane
    # android_dir   = File.expand_path("..", fastlane_dir)     # android/
    # project_root  = File.expand_path("..", android_dir)      # repo root

    # # Sanity checks (helpful logs if something is wrong)
    # UI.user_error!("android folder not found at #{android_dir}") unless Dir.exist?(android_dir)
    # UI.user_error!("gradlew missing at #{android_dir}/gradlew") unless File.exist?(File.join(android_dir, "gradlew"))

    # # 1) Get Flutter deps from repo root
    # sh "cd #{project_root} && flutter pub get"

    # # 2A) Build via Gradle (signed release)
    # sh "cd #{android_dir} && chmod +x ./gradlew && ./gradlew clean assembleRelease"
    # apk_path = File.join(android_dir, "app/build/outputs/apk/release/app-release.apk")

    # UI.user_error!("APK not found at: #{apk_path}") unless File.exist?(apk_path)

    # # 3) Upload to Firebase (plugin)  â€” or call the CLI directly if you prefer
    # firebase_app_distribution(
    #   app: ENV["FIREBASE_APP_ID_ANDROID"],
    #   testers: ENV["FIREBASE_TESTERS"],
    #   release_notes: "CI build #{Time.now.utc}",
    #   apk_path: apk_path,
    #   firebase_cli_token: ENV["FIREBASE_TOKEN"]
    # )
  end
end
